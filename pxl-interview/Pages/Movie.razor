@page "/movies"
@inject HttpClient Http
@using System.Text.Json.Serialization;

<link href="/css/Movie.css" rel="stylesheet" />

<div class="header">
    <h1>Movies</h1>
    <p>Some of the latest and greatest movies out there folks</p>
</div>

<ul>
    <div class="film-container">
        @foreach (var film in films)
        {
            if (film == null)
            {
                <div class="loader">
                    <h2>Loading...</h2>
                </div>
            }
            else
            {
            <li>
                <div class="data-container">
                    <div class="data-title">
                        <h2>@film.Name</h2>
                    </div>
                    <div class="data-info">
                        <p>@film.Synopsis</p>
                        <p>Release Date: @ConvertUnixTimestampToDate(@film.ReleaseDate)</p>
                    </div>
                </div>
            </li>
        }
    }
        </div>
    </ul>

    <a href="/add-movie" class="main-button">Add New Movie</a>


    @code {
        // Create field that is an array of film objects
        private Film[] films = new Film[0];

        // Gets the data from the json file based on the API. Converts to array of film objects which we can then iterate over and display.
        protected override async Task OnInitializedAsync()
        {
            try
            {
                films = await Http.GetFromJsonAsync<Film[]>("sample-data/movie.json");
            }
            catch
            {
                Console.WriteLine($"Error loading movies:");
            }
        }

        // Public film class with the fields Name and Synopsis that are both string types.
        // add the JSON property name to make sure that it grabs the correct value.
        public class Film
        {
            [JsonPropertyName("name")]
            public string? Name { get; set; }

            [JsonPropertyName("synopsis")]
            public string? Synopsis { get; set; }

            [JsonPropertyName("release_date")]
            public int? ReleaseDate { get; set; }
        }

        // Convert the annoying timestamp to a readable date format
        private string ConvertUnixTimestampToDate(long? unixTimestamp)
        {
            if (unixTimestamp.HasValue)
            {
                DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(unixTimestamp.Value);
                return dateTimeOffset.ToString("yyyy-MM-dd"); // Just return the date part
            }
            return "Unknown date";
        }

    }

