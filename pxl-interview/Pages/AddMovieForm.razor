@page "/add-movie"
@inject HttpClient Http
@inject NavigationManager NavManager
@using System.ComponentModel.DataAnnotations;

<link href="/css/AddMovieForm.css" rel="stylesheet" />


<div class="add-movie-form">
    <h1>Add New Movie</h1>
    <EditForm Model="newFilm" OnValidSubmit="AddFilm">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="newFilm.Name" class="form-control" />

        </div>
        <div class="form-group">
            <label for="synopsis">Synopsis:</label>
            <InputTextArea id="synopsis" @bind-Value="newFilm.Synopsis" class="form-control" rows="5"></InputTextArea>
        </div>
        <button type="submit" class="btn btn-success">Add Movie</button>
    </EditForm>
</div>

@code {
    // creates a new array of Film objects
    private Film[]? films;
    private Film newFilm = new Film();

    // Gets the data from the API Endpoint
    protected override async Task OnInitializedAsync()
    {
        films = await Http.GetFromJsonAsync<Film[]>("https://64cd647fbb31a268409aa8a6.mockapi.io/api/movies");
    }

    // Method to make post request to add the film to the api endpoint. 
    private async Task AddFilm()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://64cd647fbb31a268409aa8a6.mockapi.io/api/movies", newFilm);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Film added.");
                NavManager.NavigateTo("/movies", forceLoad: true);  // Force reload so list is shown againk
            }
            else
            {
                Console.WriteLine($"Error adding film: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding film: {ex.Message}");
        }

        newFilm = new Film(); // Reset the form model for new film addirion.
    }

    public class Film
    {
        [Required(ErrorMessage = "Movie name is required.")]
        [StringLength(100, ErrorMessage = "Movie name cannot be longer than 100 characters.")]
        public string? Name { get; set; }


        public string? Synopsis { get; set; }
    }

}

